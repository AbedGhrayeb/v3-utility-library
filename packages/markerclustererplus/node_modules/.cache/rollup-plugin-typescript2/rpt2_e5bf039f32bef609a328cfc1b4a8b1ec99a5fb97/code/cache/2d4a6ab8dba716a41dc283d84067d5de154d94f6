{"code":"/**\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { Cluster } from \"./cluster\";\r\nimport { OverlayViewSafe } from \"./overlay-view-safe\";\r\n/**\r\n * @ignore\r\n */\r\nconst getOption = (options, prop, def) => {\r\n    if (options[prop] !== undefined) {\r\n        return options[prop];\r\n    }\r\n    else {\r\n        return def;\r\n    }\r\n};\r\nexport class MarkerClusterer extends OverlayViewSafe {\r\n    /**\r\n     * Creates a MarkerClusterer object with the options specified in {@link MarkerClustererOptions}.\r\n     * @param map The Google map to attach to.\r\n     * @param markers The markers to be added to the cluster.\r\n     * @param options The optional parameters.\r\n     */\r\n    constructor(map, markers = [], options = {}) {\r\n        super();\r\n        this.options = options;\r\n        this.markers_ = [];\r\n        this.clusters_ = [];\r\n        this.listeners_ = [];\r\n        this.activeMap_ = null;\r\n        this.ready_ = false;\r\n        this.ariaLabelFn = this.options.ariaLabelFn || (() => \"\");\r\n        this.zIndex_ = this.options.zIndex || google.maps.Marker.MAX_ZINDEX + 1;\r\n        this.gridSize_ = this.options.gridSize || 60;\r\n        this.minClusterSize_ = this.options.minimumClusterSize || 2;\r\n        this.maxZoom_ = this.options.maxZoom || null;\r\n        this.styles_ = this.options.styles || [];\r\n        this.title_ = this.options.title || \"\";\r\n        this.zoomOnClick_ = getOption(this.options, \"zoomOnClick\", true);\r\n        this.averageCenter_ = getOption(this.options, \"averageCenter\", false);\r\n        this.ignoreHidden_ = getOption(this.options, \"ignoreHidden\", false);\r\n        this.enableRetinaIcons_ = getOption(this.options, \"enableRetinaIcons\", false);\r\n        this.imagePath_ = this.options.imagePath || MarkerClusterer.IMAGE_PATH;\r\n        this.imageExtension_ = this.options.imageExtension || MarkerClusterer.IMAGE_EXTENSION;\r\n        this.imageSizes_ = this.options.imageSizes || MarkerClusterer.IMAGE_SIZES;\r\n        this.calculator_ = this.options.calculator || MarkerClusterer.CALCULATOR;\r\n        this.batchSize_ = this.options.batchSize || MarkerClusterer.BATCH_SIZE;\r\n        this.batchSizeIE_ = this.options.batchSizeIE || MarkerClusterer.BATCH_SIZE_IE;\r\n        this.clusterClass_ = this.options.clusterClass || \"cluster\";\r\n        if (navigator.userAgent.toLowerCase().indexOf(\"msie\") !== -1) {\r\n            // Try to avoid IE timeout when processing a huge number of markers:\r\n            this.batchSize_ = this.batchSizeIE_;\r\n        }\r\n        this.setupStyles_();\r\n        this.addMarkers(markers, true);\r\n        this.setMap(map); // Note: this causes onAdd to be called\r\n    }\r\n    /**\r\n     * Implementation of the onAdd interface method.\r\n     * @ignore\r\n     */\r\n    onAdd() {\r\n        this.activeMap_ = this.getMap();\r\n        this.ready_ = true;\r\n        this.repaint();\r\n        this.prevZoom_ = this.getMap().getZoom();\r\n        // Add the map event listeners\r\n        this.listeners_ = [\r\n            google.maps.event.addListener(this.getMap(), \"zoom_changed\", () => {\r\n                const map = this.getMap(); // eslint-disable-line @typescript-eslint/no-explicit-any\r\n                // Fix for bug #407\r\n                // Determines map type and prevents illegal zoom levels\r\n                const minZoom = map.minZoom || 0;\r\n                const maxZoom = Math.min(map.maxZoom || 100, map.mapTypes[map.getMapTypeId()].maxZoom);\r\n                const zoom = Math.min(Math.max(this.getMap().getZoom(), minZoom), maxZoom);\r\n                if (this.prevZoom_ != zoom) {\r\n                    this.prevZoom_ = zoom;\r\n                    this.resetViewport_(false);\r\n                }\r\n            }),\r\n            google.maps.event.addListener(this.getMap(), \"idle\", () => {\r\n                this.redraw_();\r\n            })\r\n        ];\r\n    }\r\n    /**\r\n     * Implementation of the onRemove interface method.\r\n     * Removes map event listeners and all cluster icons from the DOM.\r\n     * All managed markers are also put back on the map.\r\n     * @ignore\r\n     */\r\n    onRemove() {\r\n        // Put all the managed markers back on the map:\r\n        for (let i = 0; i < this.markers_.length; i++) {\r\n            if (this.markers_[i].getMap() !== this.activeMap_) {\r\n                this.markers_[i].setMap(this.activeMap_);\r\n            }\r\n        }\r\n        // Remove all clusters:\r\n        for (let i = 0; i < this.clusters_.length; i++) {\r\n            this.clusters_[i].remove();\r\n        }\r\n        this.clusters_ = [];\r\n        // Remove map event listeners:\r\n        for (let i = 0; i < this.listeners_.length; i++) {\r\n            google.maps.event.removeListener(this.listeners_[i]);\r\n        }\r\n        this.listeners_ = [];\r\n        this.activeMap_ = null;\r\n        this.ready_ = false;\r\n    }\r\n    /**\r\n     * Implementation of the draw interface method.\r\n     * @ignore\r\n     */\r\n    draw() { }\r\n    /**\r\n     * Sets up the styles object.\r\n     */\r\n    setupStyles_() {\r\n        if (this.styles_.length > 0) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.imageSizes_.length; i++) {\r\n            const size = this.imageSizes_[i];\r\n            this.styles_.push(MarkerClusterer.withDefaultStyle({\r\n                url: this.imagePath_ + (i + 1) + \".\" + this.imageExtension_,\r\n                height: size,\r\n                width: size\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     *  Fits the map to the bounds of the markers managed by the clusterer.\r\n     */\r\n    fitMapToMarkers(padding) {\r\n        const markers = this.getMarkers();\r\n        const bounds = new google.maps.LatLngBounds();\r\n        for (let i = 0; i < markers.length; i++) {\r\n            // March 3, 2018: Bug fix -- honor the ignoreHidden property\r\n            if (markers[i].getVisible() || !this.getIgnoreHidden()) {\r\n                bounds.extend(markers[i].getPosition());\r\n            }\r\n        }\r\n        this.getMap().fitBounds(bounds, padding);\r\n    }\r\n    /**\r\n     * Returns the value of the `gridSize` property.\r\n     *\r\n     * @return The grid size.\r\n     */\r\n    getGridSize() {\r\n        return this.gridSize_;\r\n    }\r\n    /**\r\n     * Sets the value of the `gridSize` property.\r\n     *\r\n     * @param gridSize The grid size.\r\n     */\r\n    setGridSize(gridSize) {\r\n        this.gridSize_ = gridSize;\r\n    }\r\n    /**\r\n     * Returns the value of the `minimumClusterSize` property.\r\n     *\r\n     * @return The minimum cluster size.\r\n     */\r\n    getMinimumClusterSize() {\r\n        return this.minClusterSize_;\r\n    }\r\n    /**\r\n     * Sets the value of the `minimumClusterSize` property.\r\n     *\r\n     * @param minimumClusterSize The minimum cluster size.\r\n     */\r\n    setMinimumClusterSize(minimumClusterSize) {\r\n        this.minClusterSize_ = minimumClusterSize;\r\n    }\r\n    /**\r\n     *  Returns the value of the `maxZoom` property.\r\n     *\r\n     *  @return The maximum zoom level.\r\n     */\r\n    getMaxZoom() {\r\n        return this.maxZoom_;\r\n    }\r\n    /**\r\n     *  Sets the value of the `maxZoom` property.\r\n     *\r\n     *  @param maxZoom The maximum zoom level.\r\n     */\r\n    setMaxZoom(maxZoom) {\r\n        this.maxZoom_ = maxZoom;\r\n    }\r\n    getZIndex() {\r\n        return this.zIndex_;\r\n    }\r\n    setZIndex(zIndex) {\r\n        this.zIndex_ = zIndex;\r\n    }\r\n    /**\r\n     *  Returns the value of the `styles` property.\r\n     *\r\n     *  @return The array of styles defining the cluster markers to be used.\r\n     */\r\n    getStyles() {\r\n        return this.styles_;\r\n    }\r\n    /**\r\n     *  Sets the value of the `styles` property.\r\n     *\r\n     *  @param styles The array of styles to use.\r\n     */\r\n    setStyles(styles) {\r\n        this.styles_ = styles;\r\n    }\r\n    /**\r\n     * Returns the value of the `title` property.\r\n     *\r\n     * @return The content of the title text.\r\n     */\r\n    getTitle() {\r\n        return this.title_;\r\n    }\r\n    /**\r\n     *  Sets the value of the `title` property.\r\n     *\r\n     *  @param title The value of the title property.\r\n     */\r\n    setTitle(title) {\r\n        this.title_ = title;\r\n    }\r\n    /**\r\n     * Returns the value of the `zoomOnClick` property.\r\n     *\r\n     * @return True if zoomOnClick property is set.\r\n     */\r\n    getZoomOnClick() {\r\n        return this.zoomOnClick_;\r\n    }\r\n    /**\r\n     *  Sets the value of the `zoomOnClick` property.\r\n     *\r\n     *  @param zoomOnClick The value of the zoomOnClick property.\r\n     */\r\n    setZoomOnClick(zoomOnClick) {\r\n        this.zoomOnClick_ = zoomOnClick;\r\n    }\r\n    /**\r\n     * Returns the value of the `averageCenter` property.\r\n     *\r\n     * @return True if averageCenter property is set.\r\n     */\r\n    getAverageCenter() {\r\n        return this.averageCenter_;\r\n    }\r\n    /**\r\n     *  Sets the value of the `averageCenter` property.\r\n     *\r\n     *  @param averageCenter The value of the averageCenter property.\r\n     */\r\n    setAverageCenter(averageCenter) {\r\n        this.averageCenter_ = averageCenter;\r\n    }\r\n    /**\r\n     * Returns the value of the `ignoreHidden` property.\r\n     *\r\n     * @return True if ignoreHidden property is set.\r\n     */\r\n    getIgnoreHidden() {\r\n        return this.ignoreHidden_;\r\n    }\r\n    /**\r\n     *  Sets the value of the `ignoreHidden` property.\r\n     *\r\n     *  @param ignoreHidden The value of the ignoreHidden property.\r\n     */\r\n    setIgnoreHidden(ignoreHidden) {\r\n        this.ignoreHidden_ = ignoreHidden;\r\n    }\r\n    /**\r\n     * Returns the value of the `enableRetinaIcons` property.\r\n     *\r\n     * @return True if enableRetinaIcons property is set.\r\n     */\r\n    getEnableRetinaIcons() {\r\n        return this.enableRetinaIcons_;\r\n    }\r\n    /**\r\n     *  Sets the value of the `enableRetinaIcons` property.\r\n     *\r\n     *  @param enableRetinaIcons The value of the enableRetinaIcons property.\r\n     */\r\n    setEnableRetinaIcons(enableRetinaIcons) {\r\n        this.enableRetinaIcons_ = enableRetinaIcons;\r\n    }\r\n    /**\r\n     * Returns the value of the `imageExtension` property.\r\n     *\r\n     * @return The value of the imageExtension property.\r\n     */\r\n    getImageExtension() {\r\n        return this.imageExtension_;\r\n    }\r\n    /**\r\n     *  Sets the value of the `imageExtension` property.\r\n     *\r\n     *  @param imageExtension The value of the imageExtension property.\r\n     */\r\n    setImageExtension(imageExtension) {\r\n        this.imageExtension_ = imageExtension;\r\n    }\r\n    /**\r\n     * Returns the value of the `imagePath` property.\r\n     *\r\n     * @return The value of the imagePath property.\r\n     */\r\n    getImagePath() {\r\n        return this.imagePath_;\r\n    }\r\n    /**\r\n     *  Sets the value of the `imagePath` property.\r\n     *\r\n     *  @param imagePath The value of the imagePath property.\r\n     */\r\n    setImagePath(imagePath) {\r\n        this.imagePath_ = imagePath;\r\n    }\r\n    /**\r\n     * Returns the value of the `imageSizes` property.\r\n     *\r\n     * @return The value of the imageSizes property.\r\n     */\r\n    getImageSizes() {\r\n        return this.imageSizes_;\r\n    }\r\n    /**\r\n     *  Sets the value of the `imageSizes` property.\r\n     *\r\n     *  @param imageSizes The value of the imageSizes property.\r\n     */\r\n    setImageSizes(imageSizes) {\r\n        this.imageSizes_ = imageSizes;\r\n    }\r\n    /**\r\n     * Returns the value of the `calculator` property.\r\n     *\r\n     * @return the value of the calculator property.\r\n     */\r\n    getCalculator() {\r\n        return this.calculator_;\r\n    }\r\n    /**\r\n     * Sets the value of the `calculator` property.\r\n     *\r\n     * @param calculator The value of the calculator property.\r\n     */\r\n    setCalculator(calculator) {\r\n        this.calculator_ = calculator;\r\n    }\r\n    /**\r\n     * Returns the value of the `batchSizeIE` property.\r\n     *\r\n     * @return the value of the batchSizeIE property.\r\n     */\r\n    getBatchSizeIE() {\r\n        return this.batchSizeIE_;\r\n    }\r\n    /**\r\n     * Sets the value of the `batchSizeIE` property.\r\n     *\r\n     *  @param batchSizeIE The value of the batchSizeIE property.\r\n     */\r\n    setBatchSizeIE(batchSizeIE) {\r\n        this.batchSizeIE_ = batchSizeIE;\r\n    }\r\n    /**\r\n     * Returns the value of the `clusterClass` property.\r\n     *\r\n     * @return the value of the clusterClass property.\r\n     */\r\n    getClusterClass() {\r\n        return this.clusterClass_;\r\n    }\r\n    /**\r\n     * Sets the value of the `clusterClass` property.\r\n     *\r\n     *  @param clusterClass The value of the clusterClass property.\r\n     */\r\n    setClusterClass(clusterClass) {\r\n        this.clusterClass_ = clusterClass;\r\n    }\r\n    /**\r\n     *  Returns the array of markers managed by the clusterer.\r\n     *\r\n     *  @return The array of markers managed by the clusterer.\r\n     */\r\n    getMarkers() {\r\n        return this.markers_;\r\n    }\r\n    /**\r\n     *  Returns the number of markers managed by the clusterer.\r\n     *\r\n     *  @return The number of markers.\r\n     */\r\n    getTotalMarkers() {\r\n        return this.markers_.length;\r\n    }\r\n    /**\r\n     * Returns the current array of clusters formed by the clusterer.\r\n     *\r\n     * @return The array of clusters formed by the clusterer.\r\n     */\r\n    getClusters() {\r\n        return this.clusters_;\r\n    }\r\n    /**\r\n     * Returns the number of clusters formed by the clusterer.\r\n     *\r\n     * @return The number of clusters formed by the clusterer.\r\n     */\r\n    getTotalClusters() {\r\n        return this.clusters_.length;\r\n    }\r\n    /**\r\n     * Adds a marker to the clusterer. The clusters are redrawn unless\r\n     *  `nodraw` is set to `true`.\r\n     *\r\n     * @param marker The marker to add.\r\n     * @param nodraw Set to `true` to prevent redrawing.\r\n     */\r\n    addMarker(marker, nodraw) {\r\n        this.pushMarkerTo_(marker);\r\n        if (!nodraw) {\r\n            this.redraw_();\r\n        }\r\n    }\r\n    /**\r\n     * Adds an array of markers to the clusterer. The clusters are redrawn unless\r\n     *  `nodraw` is set to `true`.\r\n     *\r\n     * @param markers The markers to add.\r\n     * @param nodraw Set to `true` to prevent redrawing.\r\n     */\r\n    addMarkers(markers, nodraw) {\r\n        for (const key in markers) {\r\n            if (Object.prototype.hasOwnProperty.call(markers, key)) {\r\n                this.pushMarkerTo_(markers[key]);\r\n            }\r\n        }\r\n        if (!nodraw) {\r\n            this.redraw_();\r\n        }\r\n    }\r\n    /**\r\n     * Pushes a marker to the clusterer.\r\n     *\r\n     * @param marker The marker to add.\r\n     */\r\n    pushMarkerTo_(marker) {\r\n        // If the marker is draggable add a listener so we can update the clusters on the dragend:\r\n        if (marker.getDraggable()) {\r\n            google.maps.event.addListener(marker, \"dragend\", () => {\r\n                if (this.ready_) {\r\n                    marker.isAdded = false;\r\n                    this.repaint();\r\n                }\r\n            });\r\n        }\r\n        marker.isAdded = false;\r\n        this.markers_.push(marker);\r\n    }\r\n    /**\r\n     * Removes a marker from the cluster.  The clusters are redrawn unless\r\n     *  `nodraw` is set to `true`. Returns `true` if the\r\n     *  marker was removed from the clusterer.\r\n     *\r\n     * @param marker The marker to remove.\r\n     * @param nodraw Set to `true` to prevent redrawing.\r\n     * @return True if the marker was removed from the clusterer.\r\n     */\r\n    removeMarker(marker, nodraw) {\r\n        const removed = this.removeMarker_(marker);\r\n        if (!nodraw && removed) {\r\n            this.repaint();\r\n        }\r\n        return removed;\r\n    }\r\n    /**\r\n     * Removes an array of markers from the cluster. The clusters are redrawn unless\r\n     *  `nodraw` is set to `true`. Returns `true` if markers were removed from the clusterer.\r\n     *\r\n     * @param markers The markers to remove.\r\n     * @param nodraw Set to `true` to prevent redrawing.\r\n     * @return True if markers were removed from the clusterer.\r\n     */\r\n    removeMarkers(markers, nodraw) {\r\n        let removed = false;\r\n        for (let i = 0; i < markers.length; i++) {\r\n            const r = this.removeMarker_(markers[i]);\r\n            removed = removed || r;\r\n        }\r\n        if (!nodraw && removed) {\r\n            this.repaint();\r\n        }\r\n        return removed;\r\n    }\r\n    /**\r\n     * Removes a marker and returns true if removed, false if not.\r\n     *\r\n     * @param marker The marker to remove\r\n     * @return Whether the marker was removed or not\r\n     */\r\n    removeMarker_(marker) {\r\n        let index = -1;\r\n        if (this.markers_.indexOf) {\r\n            index = this.markers_.indexOf(marker);\r\n        }\r\n        else {\r\n            for (let i = 0; i < this.markers_.length; i++) {\r\n                if (marker === this.markers_[i]) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (index === -1) {\r\n            // Marker is not in our list of markers, so do nothing:\r\n            return false;\r\n        }\r\n        marker.setMap(null);\r\n        this.markers_.splice(index, 1); // Remove the marker from the list of managed markers\r\n        return true;\r\n    }\r\n    /**\r\n     * Removes all clusters and markers from the map and also removes all markers\r\n     *  managed by the clusterer.\r\n     */\r\n    clearMarkers() {\r\n        this.resetViewport_(true);\r\n        this.markers_ = [];\r\n    }\r\n    /**\r\n     * Recalculates and redraws all the marker clusters from scratch.\r\n     *  Call this after changing any properties.\r\n     */\r\n    repaint() {\r\n        const oldClusters = this.clusters_.slice();\r\n        this.clusters_ = [];\r\n        this.resetViewport_(false);\r\n        this.redraw_();\r\n        // Remove the old clusters.\r\n        // Do it in a timeout to prevent blinking effect.\r\n        setTimeout(function () {\r\n            for (let i = 0; i < oldClusters.length; i++) {\r\n                oldClusters[i].remove();\r\n            }\r\n        }, 0);\r\n    }\r\n    /**\r\n     * Returns the current bounds extended by the grid size.\r\n     *\r\n     * @param bounds The bounds to extend.\r\n     * @return The extended bounds.\r\n     * @ignore\r\n     */\r\n    getExtendedBounds(bounds) {\r\n        const projection = this.getProjection();\r\n        // Turn the bounds into latlng.\r\n        const tr = new google.maps.LatLng(bounds.getNorthEast().lat(), bounds.getNorthEast().lng());\r\n        const bl = new google.maps.LatLng(bounds.getSouthWest().lat(), bounds.getSouthWest().lng());\r\n        // Convert the points to pixels and the extend out by the grid size.\r\n        const trPix = projection.fromLatLngToDivPixel(tr);\r\n        trPix.x += this.gridSize_;\r\n        trPix.y -= this.gridSize_;\r\n        const blPix = projection.fromLatLngToDivPixel(bl);\r\n        blPix.x -= this.gridSize_;\r\n        blPix.y += this.gridSize_;\r\n        // Convert the pixel points back to LatLng\r\n        const ne = projection.fromDivPixelToLatLng(trPix);\r\n        const sw = projection.fromDivPixelToLatLng(blPix);\r\n        // Extend the bounds to contain the new bounds.\r\n        bounds.extend(ne);\r\n        bounds.extend(sw);\r\n        return bounds;\r\n    }\r\n    /**\r\n     * Redraws all the clusters.\r\n     */\r\n    redraw_() {\r\n        this.createClusters_(0);\r\n    }\r\n    /**\r\n     * Removes all clusters from the map. The markers are also removed from the map\r\n     *  if `hide` is set to `true`.\r\n     *\r\n     * @param hide Set to `true` to also remove the markers from the map.\r\n     */\r\n    resetViewport_(hide) {\r\n        // Remove all the clusters\r\n        for (let i = 0; i < this.clusters_.length; i++) {\r\n            this.clusters_[i].remove();\r\n        }\r\n        this.clusters_ = [];\r\n        // Reset the markers to not be added and to be removed from the map.\r\n        for (let i = 0; i < this.markers_.length; i++) {\r\n            const marker = this.markers_[i];\r\n            marker.isAdded = false;\r\n            if (hide) {\r\n                marker.setMap(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calculates the distance between two latlng locations in km.\r\n     *\r\n     * @param p1 The first lat lng point.\r\n     * @param p2 The second lat lng point.\r\n     * @return The distance between the two points in km.\r\n     * @link http://www.movable-type.co.uk/scripts/latlong.html\r\n     */\r\n    distanceBetweenPoints_(p1, p2) {\r\n        const R = 6371; // Radius of the Earth in km\r\n        const dLat = ((p2.lat() - p1.lat()) * Math.PI) / 180;\r\n        const dLon = ((p2.lng() - p1.lng()) * Math.PI) / 180;\r\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n            Math.cos((p1.lat() * Math.PI) / 180) *\r\n                Math.cos((p2.lat() * Math.PI) / 180) *\r\n                Math.sin(dLon / 2) *\r\n                Math.sin(dLon / 2);\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        return R * c;\r\n    }\r\n    /**\r\n     * Determines if a marker is contained in a bounds.\r\n     *\r\n     * @param marker The marker to check.\r\n     * @param bounds The bounds to check against.\r\n     * @return True if the marker is in the bounds.\r\n     */\r\n    isMarkerInBounds_(marker, bounds) {\r\n        return bounds.contains(marker.getPosition());\r\n    }\r\n    /**\r\n     * Adds a marker to a cluster, or creates a new cluster.\r\n     *\r\n     * @param marker The marker to add.\r\n     */\r\n    addToClosestCluster_(marker) {\r\n        let distance = 40000; // Some large number\r\n        let clusterToAddTo = null;\r\n        for (let i = 0; i < this.clusters_.length; i++) {\r\n            const cluster = this.clusters_[i];\r\n            const center = cluster.getCenter();\r\n            if (center) {\r\n                const d = this.distanceBetweenPoints_(center, marker.getPosition());\r\n                if (d < distance) {\r\n                    distance = d;\r\n                    clusterToAddTo = cluster;\r\n                }\r\n            }\r\n        }\r\n        if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {\r\n            clusterToAddTo.addMarker(marker);\r\n        }\r\n        else {\r\n            const cluster = new Cluster(this);\r\n            cluster.addMarker(marker);\r\n            this.clusters_.push(cluster);\r\n        }\r\n    }\r\n    /**\r\n     * Creates the clusters. This is done in batches to avoid timeout errors\r\n     *  in some browsers when there is a huge number of markers.\r\n     *\r\n     * @param iFirst The index of the first marker in the batch of\r\n     *  markers to be added to clusters.\r\n     */\r\n    createClusters_(iFirst) {\r\n        if (!this.ready_) {\r\n            return;\r\n        }\r\n        // Cancel previous batch processing if we're working on the first batch:\r\n        if (iFirst === 0) {\r\n            google.maps.event.trigger(this, \"clusteringbegin\", this);\r\n            if (typeof this.timerRefStatic !== \"undefined\") {\r\n                clearTimeout(this.timerRefStatic);\r\n                delete this.timerRefStatic;\r\n            }\r\n        }\r\n        // Get our current map view bounds.\r\n        // Create a new bounds object so we don't affect the map.\r\n        //\r\n        // See Comments 9 & 11 on Issue 3651 relating to this workaround for a Google Maps bug:\r\n        let mapBounds;\r\n        if (this.getMap().getZoom() > 3) {\r\n            mapBounds = new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(), this.getMap().getBounds().getNorthEast());\r\n        }\r\n        else {\r\n            mapBounds = new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472, -178.48388434375), new google.maps.LatLng(-85.08136444384544, 178.00048865625));\r\n        }\r\n        const bounds = this.getExtendedBounds(mapBounds);\r\n        const iLast = Math.min(iFirst + this.batchSize_, this.markers_.length);\r\n        for (let i = iFirst; i < iLast; i++) {\r\n            const marker = this.markers_[i];\r\n            if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) {\r\n                if (!this.ignoreHidden_ ||\r\n                    (this.ignoreHidden_ && marker.getVisible())) {\r\n                    this.addToClosestCluster_(marker);\r\n                }\r\n            }\r\n        }\r\n        if (iLast < this.markers_.length) {\r\n            this.timerRefStatic = window.setTimeout(() => {\r\n                this.createClusters_(iLast);\r\n            }, 0);\r\n        }\r\n        else {\r\n            delete this.timerRefStatic;\r\n            google.maps.event.trigger(this, \"clusteringend\", this);\r\n            for (let i = 0; i < this.clusters_.length; i++) {\r\n                this.clusters_[i].updateIcon();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The default function for determining the label text and style\r\n     * for a cluster icon.\r\n     *\r\n     * @param markers The array of markers represented by the cluster.\r\n     * @param numStyles The number of marker styles available.\r\n     * @return The information resource for the cluster.\r\n     */\r\n    static CALCULATOR(markers, numStyles) {\r\n        let index = 0;\r\n        const count = markers.length;\r\n        let dv = count;\r\n        while (dv !== 0) {\r\n            dv = Math.floor(dv / 10);\r\n            index++;\r\n        }\r\n        index = Math.min(index, numStyles);\r\n        return {\r\n            text: count.toString(),\r\n            index: index,\r\n            title: \"\"\r\n        };\r\n    }\r\n    /**\r\n     * Generates default styles augmented with user passed values.\r\n     * Useful when you want to override some default values but keep untouched\r\n     *\r\n     * @param overrides override default values\r\n     */\r\n    static withDefaultStyle(overrides) {\r\n        return Object.assign({ textColor: \"black\", textSize: 11, textDecoration: \"none\", textLineHeight: overrides.height, fontWeight: \"bold\", fontStyle: \"normal\", fontFamily: \"Arial,sans-serif\", backgroundPosition: \"0 0\" }, overrides);\r\n    }\r\n}\r\n/**\r\n * The number of markers to process in one batch.\r\n */\r\nMarkerClusterer.BATCH_SIZE = 2000;\r\n/**\r\n * The number of markers to process in one batch (IE only).\r\n */\r\nMarkerClusterer.BATCH_SIZE_IE = 500;\r\n/**\r\n * The default root name for the marker cluster images.\r\n */\r\nMarkerClusterer.IMAGE_PATH = \"../images/m\";\r\n/**\r\n * The default extension name for the marker cluster images.\r\n */\r\nMarkerClusterer.IMAGE_EXTENSION = \"png\";\r\n/**\r\n * The default array of sizes for the marker cluster images.\r\n */\r\nMarkerClusterer.IMAGE_SIZES = [53, 56, 66, 78, 90];\r\n//# sourceMappingURL=markerclusterer.js.map","references":["/home/travis/build/googlemaps/v3-utility-library/packages/markerclustererplus/src/cluster-icon.ts","/home/travis/build/googlemaps/v3-utility-library/packages/markerclustererplus/src/cluster.ts","/home/travis/build/googlemaps/v3-utility-library/packages/markerclustererplus/src/overlay-view-safe.ts"],"map":"{\"version\":3,\"file\":\"markerclusterer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/markerclusterer.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/travis/build/googlemaps/v3-utility-library/packages/markerclustererplus/markerclusterer.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/// <reference types=\"googlemaps\" />\r\n/**\r\n * @name MarkerClustererPlus for Google Maps V3\r\n * @author Gary Little\r\n * @fileoverview\r\n * The library creates and manages per-zoom-level clusters for large amounts of markers.\r\n * <p>\r\n * This is an enhanced V3 implementation of the V2 MarkerClusterer by Xiaoxi Wu. It is\r\n * based on the V3 MarkerClusterer port by Luke Mahe. MarkerClustererPlus was created\r\n * by Gary Little.\r\n * <p>\r\n * v2.0 release: MarkerClustererPlus v2.0 is backward compatible with MarkerClusterer v1.0. It\r\n *  adds support for the `ignoreHidden`, `title`, `batchSizeIE`,\r\n *  and `calculator` properties as well as support for four more events. It also allows\r\n *  greater control over the styling of the text that appears on the cluster marker. The\r\n *  documentation has been significantly improved and the overall code has been simplified and\r\n *  polished. Very large numbers of markers can now be managed without causing Javascript timeout\r\n *  errors on Internet Explorer. Note that the name of the `clusterclick` event has been\r\n *  deprecated. The new name is `click`, so please change your application code now.\r\n */\r\nimport { ClusterIconInfo, ClusterIconStyle } from \"./cluster-icon\";\r\nimport { Cluster } from \"./cluster\";\r\nimport { OverlayViewSafe } from \"./overlay-view-safe\";\r\n/**\r\n * @param text The text attribute of the cluster\r\n */\r\ndeclare type AriaLabelFn = (text: string) => string;\r\nexport declare type Calculator = (markers: google.maps.Marker[], clusterIconStylesCount: number) => ClusterIconInfo;\r\nexport interface ClusterAugmentedMarker extends google.maps.Marker {\r\n    isAdded?: boolean;\r\n}\r\n/**\r\n * This event is fired on the {@link MarkerClusterer} instance when the `MarkerClusterer` stops clustering markers.\r\n *\r\n * Example:\r\n * ```typescript\r\n *  mc.addListener('clusteringend', (mc: MarkerClusterer) => {})\r\n * ```\r\n *\r\n * @param mc The MarkerClusterer whose markers are being clustered.\r\n * @event clusteringend\r\n */\r\nexport declare function clusteringend(mc: MarkerClusterer): void;\r\n/**\r\n * This event is fired on the {@link MarkerClusterer} instance when the `MarkerClusterer` begins clustering markers.\r\n *\r\n * Example:\r\n * ```typescript\r\n *  mc.addListener('clusteringbegin', (mc: MarkerClusterer) => {})\r\n * ```\r\n *\r\n * @param mc The MarkerClusterer whose markers are being clustered.\r\n * @event clusteringbegin\r\n */\r\nexport declare function clusteringbegin(mc: MarkerClusterer): void;\r\n/**\r\n * Optional parameter passed to the {@link MarkerClusterer} constructor.\r\n */\r\nexport interface MarkerClustererOptions {\r\n    /**\r\n     * The grid size of a cluster in pixels. The grid is a square.\r\n     *\r\n     * @default `60`\r\n     */\r\n    gridSize?: number;\r\n    /**\r\n     * The maximum zoom level at which clustering is enabled or\r\n     * `null` if clustering is to be enabled at all zoom levels.\r\n     *\r\n     * @default `null`\r\n     */\r\n    maxZoom?: number;\r\n    /**\r\n     * Whether to zoom the map when a cluster marker is\r\n     * clicked. You may want to set this to `false` if you have installed a handler\r\n     * for the `click` event and it deals with zooming on its own.\r\n     *\r\n     * @default `true`\r\n     */\r\n    zoomOnClick?: boolean;\r\n    /***\r\n     * Whether the position of a cluster marker should be\r\n     * the average position of all markers in the cluster. If set to `false`, the\r\n     * cluster marker is positioned at the location of the first marker added to the cluster.\r\n     *\r\n     * @default `false`\r\n     */\r\n    averageCenter?: boolean;\r\n    /**\r\n     * The minimum number of markers needed in a cluster\r\n     * before the markers are hidden and a cluster marker appears.\r\n     *\r\n     * @default `2`\r\n     */\r\n    minimumClusterSize?: number;\r\n    /**\r\n     *  the z-index of a cluster.\r\n     *\r\n     *  @default `google.maps.Marker.MAX_ZINDEX + 1`\r\n     */\r\n    zIndex?: number;\r\n    /**\r\n     * Whether to ignore hidden markers in clusters. You\r\n     * may want to set this to `true` to ensure that hidden markers are not included\r\n     * in the marker count that appears on a cluster marker (this count is the value of the\r\n     * `text` property of the result returned by the default  {@link calculator}).\r\n     * If set to `true` and you change the visibility of a marker being clustered, be\r\n     * sure to also call {@link MarkerClusterer#repaint()}.\r\n     *\r\n     * @default `false`\r\n     */\r\n    ignoreHidden?: boolean;\r\n    /**\r\n     * The tooltip to display when the mouse moves over a cluster\r\n     * marker. (Alternatively, you can use a custom `calculator` function to specify a\r\n     * different tooltip for each cluster marker.)\r\n     *\r\n     * @default `\"\"`\r\n     */\r\n    title?: string;\r\n    /**\r\n     * The function used to determine\r\n     * the text to be displayed on a cluster marker and the index indicating which style to use\r\n     * for the cluster marker. The input parameters for the function are (1) the array of markers\r\n     * represented by a cluster marker and (2) the number of cluster icon styles. It returns a\r\n     * {@link ClusterIconInfo} object. The default `calculator` returns a\r\n     * `text` property which is the number of markers in the cluster and an\r\n     * `index` property which is one higher than the lowest integer such that\r\n     * `10^i` exceeds the number of markers in the cluster, or the size of the styles\r\n     * array, whichever is less. The `styles` array element used has an index of\r\n     * `index` minus 1. For example, the default `calculator` returns a\r\n     * `text` value of `\"125\"` and an `index` of `3`\r\n     * for a cluster icon representing 125 markers so the element used in the `styles`\r\n     * array is `2`. A `calculator` may also return a `title`\r\n     * property that contains the text of the tooltip to be used for the cluster marker. If\r\n     * `title` is not defined, the tooltip is set to the value of the `title`\r\n     * property for the MarkerClusterer.\r\n     *\r\n     * @default {@link MarkerClusterer.CALCULATOR}\r\n     */\r\n    calculator?: Calculator;\r\n    /**\r\n     * The name of the CSS class defining general styles\r\n     * for the cluster markers. Use this class to define CSS styles that are not set up by the code\r\n     * that processes the `styles` array.\r\n     *\r\n     * @default `\"cluster\"`\r\n     */\r\n    clusterClass?: string;\r\n    /**\r\n     * An array of {@link ClusterIconStyle} elements defining the styles\r\n     * of the cluster markers to be used. The element to be used to style a given cluster marker\r\n     * is determined by the function defined by the `calculator` property.\r\n     * The default is an array of {@link ClusterIconStyle} elements whose properties are derived\r\n     * from the values for `imagePath`, `imageExtension`, and `imageSizes`.\r\n     *\r\n     * @default `styles`\r\n     */\r\n    styles?: ClusterIconStyle[];\r\n    /**\r\n     * Whether to allow the use of cluster icons that\r\n     * have sizes that are some multiple (typically double) of their actual display size. Icons such\r\n     * as these look better when viewed on high-resolution monitors such as Apple's Retina displays.\r\n     * Note: if this property is `true`, sprites cannot be used as cluster icons.\r\n     *\r\n     * @default `false`\r\n     */\r\n    enableRetinaIcons?: boolean;\r\n    /**\r\n     * Set this property to the number of markers to be processed in a single batch when using\r\n     * a browser other than Internet Explorer (for Internet Explorer, use the batchSizeIE property instead).\r\n     *\r\n     * @default `MarkerClusterer.BATCH_SIZE`\r\n     */\r\n    batchSize?: number;\r\n    /**\r\n     * When Internet Explorer is\r\n     * being used, markers are processed in several batches with a small delay inserted between\r\n     * each batch in an attempt to avoid Javascript timeout errors. Set this property to the\r\n     * number of markers to be processed in a single batch; select as high a number as you can\r\n     * without causing a timeout error in the browser. This number might need to be as low as 100\r\n     * if 15,000 markers are being managed, for example.\r\n     *\r\n     * @default `MarkerClusterer.BATCH_SIZE_IE`\r\n     */\r\n    batchSizeIE?: number;\r\n    /**\r\n     * The full URL of the root name of the group of image files to use for cluster icons.\r\n     * The complete file name is of the form `imagePath`n.`imageExtension`\r\n     * where n is the image file number (1, 2, etc.).\r\n     *\r\n     * @default `MarkerClusterer.IMAGE_PATH`\r\n     */\r\n    imagePath?: string;\r\n    /**\r\n     * The extension name for the cluster icon image files (e.g., `\"png\"` or\r\n     * `\"jpg\"`).\r\n     *\r\n     * @default `MarkerClusterer.IMAGE_EXTENSION`\r\n     */\r\n    imageExtension?: string;\r\n    /**\r\n     * An array of numbers containing the widths of the group of\r\n     * `imagePath`n.`imageExtension` image files.\r\n     * (The images are assumed to be square.)\r\n     *\r\n     * @default `MarkerClusterer.IMAGE_SIZES`\r\n     */\r\n    imageSizes?: number[];\r\n    /**\r\n     * A function to take the text attribute associated with the cluster and output a string to attach an\r\n     * ariaLabel to the cluster\r\n     */\r\n    ariaLabelFn?: AriaLabelFn;\r\n}\r\nexport declare class MarkerClusterer extends OverlayViewSafe {\r\n    private options;\r\n    /**\r\n     * The number of markers to process in one batch.\r\n     */\r\n    static BATCH_SIZE: number;\r\n    /**\r\n     * The number of markers to process in one batch (IE only).\r\n     */\r\n    static BATCH_SIZE_IE: number;\r\n    /**\r\n     * The default root name for the marker cluster images.\r\n     */\r\n    static IMAGE_PATH: string;\r\n    /**\r\n     * The default extension name for the marker cluster images.\r\n     */\r\n    static IMAGE_EXTENSION: string;\r\n    /**\r\n     * The default array of sizes for the marker cluster images.\r\n     */\r\n    static IMAGE_SIZES: number[];\r\n    private markers_;\r\n    private clusters_;\r\n    private listeners_;\r\n    private activeMap_;\r\n    private ready_;\r\n    ariaLabelFn: AriaLabelFn;\r\n    private zIndex_;\r\n    private gridSize_;\r\n    private minClusterSize_;\r\n    private maxZoom_;\r\n    private styles_;\r\n    private title_;\r\n    private zoomOnClick_;\r\n    private averageCenter_;\r\n    private ignoreHidden_;\r\n    private enableRetinaIcons_;\r\n    private imagePath_;\r\n    private imageExtension_;\r\n    private imageSizes_;\r\n    private calculator_;\r\n    private batchSize_;\r\n    private batchSizeIE_;\r\n    private clusterClass_;\r\n    private prevZoom_;\r\n    private timerRefStatic;\r\n    /**\r\n     * Creates a MarkerClusterer object with the options specified in {@link MarkerClustererOptions}.\r\n     * @param map The Google map to attach to.\r\n     * @param markers The markers to be added to the cluster.\r\n     * @param options The optional parameters.\r\n     */\r\n    constructor(map: google.maps.Map, markers?: google.maps.Marker[], options?: MarkerClustererOptions);\r\n    /**\r\n     * Implementation of the onAdd interface method.\r\n     * @ignore\r\n     */\r\n    onAdd(): void;\r\n    /**\r\n     * Implementation of the onRemove interface method.\r\n     * Removes map event listeners and all cluster icons from the DOM.\r\n     * All managed markers are also put back on the map.\r\n     * @ignore\r\n     */\r\n    onRemove(): void;\r\n    /**\r\n     * Implementation of the draw interface method.\r\n     * @ignore\r\n     */\r\n    draw(): void;\r\n    /**\r\n     * Sets up the styles object.\r\n     */\r\n    private setupStyles_;\r\n    /**\r\n     *  Fits the map to the bounds of the markers managed by the clusterer.\r\n     */\r\n    fitMapToMarkers(padding: number | google.maps.Padding): void;\r\n    /**\r\n     * Returns the value of the `gridSize` property.\r\n     *\r\n     * @return The grid size.\r\n     */\r\n    getGridSize(): number;\r\n    /**\r\n     * Sets the value of the `gridSize` property.\r\n     *\r\n     * @param gridSize The grid size.\r\n     */\r\n    setGridSize(gridSize: number): void;\r\n    /**\r\n     * Returns the value of the `minimumClusterSize` property.\r\n     *\r\n     * @return The minimum cluster size.\r\n     */\r\n    getMinimumClusterSize(): number;\r\n    /**\r\n     * Sets the value of the `minimumClusterSize` property.\r\n     *\r\n     * @param minimumClusterSize The minimum cluster size.\r\n     */\r\n    setMinimumClusterSize(minimumClusterSize: number): void;\r\n    /**\r\n     *  Returns the value of the `maxZoom` property.\r\n     *\r\n     *  @return The maximum zoom level.\r\n     */\r\n    getMaxZoom(): number;\r\n    /**\r\n     *  Sets the value of the `maxZoom` property.\r\n     *\r\n     *  @param maxZoom The maximum zoom level.\r\n     */\r\n    setMaxZoom(maxZoom: number): void;\r\n    getZIndex(): number;\r\n    setZIndex(zIndex: number): void;\r\n    /**\r\n     *  Returns the value of the `styles` property.\r\n     *\r\n     *  @return The array of styles defining the cluster markers to be used.\r\n     */\r\n    getStyles(): ClusterIconStyle[];\r\n    /**\r\n     *  Sets the value of the `styles` property.\r\n     *\r\n     *  @param styles The array of styles to use.\r\n     */\r\n    setStyles(styles: ClusterIconStyle[]): void;\r\n    /**\r\n     * Returns the value of the `title` property.\r\n     *\r\n     * @return The content of the title text.\r\n     */\r\n    getTitle(): string;\r\n    /**\r\n     *  Sets the value of the `title` property.\r\n     *\r\n     *  @param title The value of the title property.\r\n     */\r\n    setTitle(title: string): void;\r\n    /**\r\n     * Returns the value of the `zoomOnClick` property.\r\n     *\r\n     * @return True if zoomOnClick property is set.\r\n     */\r\n    getZoomOnClick(): boolean;\r\n    /**\r\n     *  Sets the value of the `zoomOnClick` property.\r\n     *\r\n     *  @param zoomOnClick The value of the zoomOnClick property.\r\n     */\r\n    setZoomOnClick(zoomOnClick: boolean): void;\r\n    /**\r\n     * Returns the value of the `averageCenter` property.\r\n     *\r\n     * @return True if averageCenter property is set.\r\n     */\r\n    getAverageCenter(): boolean;\r\n    /**\r\n     *  Sets the value of the `averageCenter` property.\r\n     *\r\n     *  @param averageCenter The value of the averageCenter property.\r\n     */\r\n    setAverageCenter(averageCenter: boolean): void;\r\n    /**\r\n     * Returns the value of the `ignoreHidden` property.\r\n     *\r\n     * @return True if ignoreHidden property is set.\r\n     */\r\n    getIgnoreHidden(): boolean;\r\n    /**\r\n     *  Sets the value of the `ignoreHidden` property.\r\n     *\r\n     *  @param ignoreHidden The value of the ignoreHidden property.\r\n     */\r\n    setIgnoreHidden(ignoreHidden: boolean): void;\r\n    /**\r\n     * Returns the value of the `enableRetinaIcons` property.\r\n     *\r\n     * @return True if enableRetinaIcons property is set.\r\n     */\r\n    getEnableRetinaIcons(): boolean;\r\n    /**\r\n     *  Sets the value of the `enableRetinaIcons` property.\r\n     *\r\n     *  @param enableRetinaIcons The value of the enableRetinaIcons property.\r\n     */\r\n    setEnableRetinaIcons(enableRetinaIcons: boolean): void;\r\n    /**\r\n     * Returns the value of the `imageExtension` property.\r\n     *\r\n     * @return The value of the imageExtension property.\r\n     */\r\n    getImageExtension(): string;\r\n    /**\r\n     *  Sets the value of the `imageExtension` property.\r\n     *\r\n     *  @param imageExtension The value of the imageExtension property.\r\n     */\r\n    setImageExtension(imageExtension: string): void;\r\n    /**\r\n     * Returns the value of the `imagePath` property.\r\n     *\r\n     * @return The value of the imagePath property.\r\n     */\r\n    getImagePath(): string;\r\n    /**\r\n     *  Sets the value of the `imagePath` property.\r\n     *\r\n     *  @param imagePath The value of the imagePath property.\r\n     */\r\n    setImagePath(imagePath: string): void;\r\n    /**\r\n     * Returns the value of the `imageSizes` property.\r\n     *\r\n     * @return The value of the imageSizes property.\r\n     */\r\n    getImageSizes(): number[];\r\n    /**\r\n     *  Sets the value of the `imageSizes` property.\r\n     *\r\n     *  @param imageSizes The value of the imageSizes property.\r\n     */\r\n    setImageSizes(imageSizes: number[]): void;\r\n    /**\r\n     * Returns the value of the `calculator` property.\r\n     *\r\n     * @return the value of the calculator property.\r\n     */\r\n    getCalculator(): Calculator;\r\n    /**\r\n     * Sets the value of the `calculator` property.\r\n     *\r\n     * @param calculator The value of the calculator property.\r\n     */\r\n    setCalculator(calculator: Calculator): void;\r\n    /**\r\n     * Returns the value of the `batchSizeIE` property.\r\n     *\r\n     * @return the value of the batchSizeIE property.\r\n     */\r\n    getBatchSizeIE(): number;\r\n    /**\r\n     * Sets the value of the `batchSizeIE` property.\r\n     *\r\n     *  @param batchSizeIE The value of the batchSizeIE property.\r\n     */\r\n    setBatchSizeIE(batchSizeIE: number): void;\r\n    /**\r\n     * Returns the value of the `clusterClass` property.\r\n     *\r\n     * @return the value of the clusterClass property.\r\n     */\r\n    getClusterClass(): string;\r\n    /**\r\n     * Sets the value of the `clusterClass` property.\r\n     *\r\n     *  @param clusterClass The value of the clusterClass property.\r\n     */\r\n    setClusterClass(clusterClass: string): void;\r\n    /**\r\n     *  Returns the array of markers managed by the clusterer.\r\n     *\r\n     *  @return The array of markers managed by the clusterer.\r\n     */\r\n    getMarkers(): google.maps.Marker[];\r\n    /**\r\n     *  Returns the number of markers managed by the clusterer.\r\n     *\r\n     *  @return The number of markers.\r\n     */\r\n    getTotalMarkers(): number;\r\n    /**\r\n     * Returns the current array of clusters formed by the clusterer.\r\n     *\r\n     * @return The array of clusters formed by the clusterer.\r\n     */\r\n    getClusters(): Cluster[];\r\n    /**\r\n     * Returns the number of clusters formed by the clusterer.\r\n     *\r\n     * @return The number of clusters formed by the clusterer.\r\n     */\r\n    getTotalClusters(): number;\r\n    /**\r\n     * Adds a marker to the clusterer. The clusters are redrawn unless\r\n     *  `nodraw` is set to `true`.\r\n     *\r\n     * @param marker The marker to add.\r\n     * @param nodraw Set to `true` to prevent redrawing.\r\n     */\r\n    addMarker(marker: google.maps.Marker, nodraw?: boolean): void;\r\n    /**\r\n     * Adds an array of markers to the clusterer. The clusters are redrawn unless\r\n     *  `nodraw` is set to `true`.\r\n     *\r\n     * @param markers The markers to add.\r\n     * @param nodraw Set to `true` to prevent redrawing.\r\n     */\r\n    addMarkers(markers: google.maps.Marker[], nodraw?: boolean): void;\r\n    /**\r\n     * Pushes a marker to the clusterer.\r\n     *\r\n     * @param marker The marker to add.\r\n     */\r\n    private pushMarkerTo_;\r\n    /**\r\n     * Removes a marker from the cluster.  The clusters are redrawn unless\r\n     *  `nodraw` is set to `true`. Returns `true` if the\r\n     *  marker was removed from the clusterer.\r\n     *\r\n     * @param marker The marker to remove.\r\n     * @param nodraw Set to `true` to prevent redrawing.\r\n     * @return True if the marker was removed from the clusterer.\r\n     */\r\n    removeMarker(marker: google.maps.Marker, nodraw?: boolean): boolean;\r\n    /**\r\n     * Removes an array of markers from the cluster. The clusters are redrawn unless\r\n     *  `nodraw` is set to `true`. Returns `true` if markers were removed from the clusterer.\r\n     *\r\n     * @param markers The markers to remove.\r\n     * @param nodraw Set to `true` to prevent redrawing.\r\n     * @return True if markers were removed from the clusterer.\r\n     */\r\n    removeMarkers(markers: google.maps.Marker[], nodraw?: boolean): boolean;\r\n    /**\r\n     * Removes a marker and returns true if removed, false if not.\r\n     *\r\n     * @param marker The marker to remove\r\n     * @return Whether the marker was removed or not\r\n     */\r\n    private removeMarker_;\r\n    /**\r\n     * Removes all clusters and markers from the map and also removes all markers\r\n     *  managed by the clusterer.\r\n     */\r\n    clearMarkers(): void;\r\n    /**\r\n     * Recalculates and redraws all the marker clusters from scratch.\r\n     *  Call this after changing any properties.\r\n     */\r\n    repaint(): void;\r\n    /**\r\n     * Returns the current bounds extended by the grid size.\r\n     *\r\n     * @param bounds The bounds to extend.\r\n     * @return The extended bounds.\r\n     * @ignore\r\n     */\r\n    getExtendedBounds(bounds: google.maps.LatLngBounds): google.maps.LatLngBounds;\r\n    /**\r\n     * Redraws all the clusters.\r\n     */\r\n    private redraw_;\r\n    /**\r\n     * Removes all clusters from the map. The markers are also removed from the map\r\n     *  if `hide` is set to `true`.\r\n     *\r\n     * @param hide Set to `true` to also remove the markers from the map.\r\n     */\r\n    private resetViewport_;\r\n    /**\r\n     * Calculates the distance between two latlng locations in km.\r\n     *\r\n     * @param p1 The first lat lng point.\r\n     * @param p2 The second lat lng point.\r\n     * @return The distance between the two points in km.\r\n     * @link http://www.movable-type.co.uk/scripts/latlong.html\r\n     */\r\n    private distanceBetweenPoints_;\r\n    /**\r\n     * Determines if a marker is contained in a bounds.\r\n     *\r\n     * @param marker The marker to check.\r\n     * @param bounds The bounds to check against.\r\n     * @return True if the marker is in the bounds.\r\n     */\r\n    private isMarkerInBounds_;\r\n    /**\r\n     * Adds a marker to a cluster, or creates a new cluster.\r\n     *\r\n     * @param marker The marker to add.\r\n     */\r\n    private addToClosestCluster_;\r\n    /**\r\n     * Creates the clusters. This is done in batches to avoid timeout errors\r\n     *  in some browsers when there is a huge number of markers.\r\n     *\r\n     * @param iFirst The index of the first marker in the batch of\r\n     *  markers to be added to clusters.\r\n     */\r\n    private createClusters_;\r\n    /**\r\n     * The default function for determining the label text and style\r\n     * for a cluster icon.\r\n     *\r\n     * @param markers The array of markers represented by the cluster.\r\n     * @param numStyles The number of marker styles available.\r\n     * @return The information resource for the cluster.\r\n     */\r\n    static CALCULATOR(markers: google.maps.Marker[], numStyles: number): ClusterIconInfo;\r\n    /**\r\n     * Generates default styles augmented with user passed values.\r\n     * Useful when you want to override some default values but keep untouched\r\n     *\r\n     * @param overrides override default values\r\n     */\r\n    static withDefaultStyle(overrides: ClusterIconStyle): ClusterIconStyle;\r\n}\r\nexport {};\r\n"}}
